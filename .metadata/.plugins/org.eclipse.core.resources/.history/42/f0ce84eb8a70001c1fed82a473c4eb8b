
#ifndef SOURCE_AUDIO_TASK_H_
#define SOURCE_AUDIO_TASK_H_
//=============================================================
//	-Includes
//=============================================================
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "ADC_task.h"

#define FRAME_SIZE                  4096u
#define SAMPLE_RATE_HZ              44100u
#define DECIMATION_RATE             64u

#define AUDIO_MODE					CYHAL_PDM_PCM_MODE_LEFT
#define GAIN_LEFT					CY_PDM_PCM_BYPASS
#define OCTAVES 					11

#define AUDIO_SYS_CLOCK_HZ          22574000u

#define PDM_DATA                    P10_5
#define PDM_CLK                     P10_4

#define FFT_FORWARD 				0x01
#define FFT_REVERSE 				0x00

#define FFT_WIN_TYP_HANN 			0x02 /* hann */
#define FFT_WIN_TYP_FLT_TOP 		0x08 /* flat top */

#define twoPi 						6.28318531
#define fourPi 						12.56637061
#define sixPi 						18.84955593

volatile bool pdm_pcm_flag = false;
//=============================================================
//	-Functions
//=============================================================
void pdm_pcm_isr_handler(void *arg, cyhal_pdm_pcm_event_t event);
void clock_init(void);
void soundsensor_integerToFloat(int16_t *samples, float *vReal, float *vImag,
		uint16_t size);
void FFT_Windowing(uint8_t windowType, uint8_t dir, float *vReal,
		uint16_t size);
void FFT_Compute(uint8_t dir, float *vReal, float *vImag, uint16_t size);
uint8_t FFT_Exponent(uint16_t value);
void FFT_Swap(float *x, float *y);
void soundsensor_calculateEnergy(float *vReal, float *vImag, uint16_t samples);
void soundsensor_sumEnergy(const float *vReal, float *vEnergy, uint16_t size,
		uint16_t octaves);
void soundsensor_loudnessWeighting(float *vEnergy, float *weighting,
		float *spectrum, uint16_t octaves);
void soundsensor_toDecibel(float *spectrum, uint16_t octaves);
float sq(float num);
void PDM_task(void* param);

#endif /* SOURCE_AUDIO_TASK_H_ */

/* [] END OF FILE  */
